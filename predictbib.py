# -*- coding: utf-8 -*-
"""
Created on Sun Feb 12 22:02:16 2023

@author: Lan
"""

import statsmodels.api as sm
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import BernoulliNB, CategoricalNB, GaussianNB
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, roc_auc_score, recall_score, precision_score


def log_reg(X, y):
    logit_model = sm.Logit(y, sm.add_constant(X))
    results = logit_model.fit(method="bfgs") # ker je sicer lahko matrika singularna

    #summary_df = results.summary().tables[1]
    return results 


# generated by ChatGPT
def evaluate_classification_metrics(Y_true, Y_pred, metrics=["accuracy", "auc", "sensitivity", "precision", "recall"]):
    results = {}   
    if "accuracy" in metrics:
        results["accuracy"] = accuracy_score(Y_true, Y_pred)
    if "auc" in metrics:
        results["auc"] = roc_auc_score(Y_true, Y_pred)
    if "sensitivity" in metrics:
        results["sensitivity"] = recall_score(Y_true, Y_pred)
    if "precision" in metrics:
        results["precision"] = precision_score(Y_true, Y_pred)
    if "recall" in metrics:
        results["recall"] = recall_score(Y_true, Y_pred)
    return results

# generated by ChatGPT
def predict_y_from_x(X, Y, test_size=0.2, model="lda", metrics=["accuracy", "auc", "sensitivity", "precision", "recall"], **kwds):
    # Split the data into training and testing sets
    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=test_size)
    
    # Initialize the appropriate classifier based on the model string
    if model == "neural network":
        clf = MLPClassifier(**kwds)
    elif model == "random forest":
        clf = RandomForestClassifier(**kwds)
    elif model == "bayes":
        clf = BernoulliNB(**kwds)
    elif model == "categorical bayes":
        clf = CategoricalNB(**kwds)
    elif model == "gaussian bayes":
        clf = GaussianNB(**kwds)
    elif model == "lda":
        clf = LinearDiscriminantAnalysis(**kwds)
    elif model == "qda":
        clf = QuadraticDiscriminantAnalysis(**kwds)
    elif model == "logistic regression":
        clf = LogisticRegression(**kwds)
    elif model == "decision tree":
        clf = DecisionTreeClassifier(**kwds)
    elif model == "svm":
        clf = SVC(**kwds)
    else:
        raise ValueError("Invalid model string. Please choose from the available models.")
    
    # Train the classifier
    clf.fit(X_train, Y_train)
    
    # Predict the target variable for the test set
    Y_pred = clf.predict(X_test)
    
    # Evaluate the model"s performance
    evaluation_results = evaluate_classification_metrics(Y_test, Y_pred, metrics=metrics)
    
    return Y_pred, clf, evaluation_results